#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'matrices_types'

module Matrices
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def sumarMatrices(m1, m2)
      send_sumarMatrices(m1, m2)
      return recv_sumarMatrices()
    end

    def send_sumarMatrices(m1, m2)
      send_message('sumarMatrices', SumarMatrices_args, :m1 => m1, :m2 => m2)
    end

    def recv_sumarMatrices()
      result = receive_message(SumarMatrices_result)
      return result.success unless result.success.nil?
      raise result.io unless result.io.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumarMatrices failed: unknown result')
    end

    def restarMatrices(m1, m2)
      send_restarMatrices(m1, m2)
      return recv_restarMatrices()
    end

    def send_restarMatrices(m1, m2)
      send_message('restarMatrices', RestarMatrices_args, :m1 => m1, :m2 => m2)
    end

    def recv_restarMatrices()
      result = receive_message(RestarMatrices_result)
      return result.success unless result.success.nil?
      raise result.io unless result.io.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restarMatrices failed: unknown result')
    end

    def multiplicarMatrices(m1, m2)
      send_multiplicarMatrices(m1, m2)
      return recv_multiplicarMatrices()
    end

    def send_multiplicarMatrices(m1, m2)
      send_message('multiplicarMatrices', MultiplicarMatrices_args, :m1 => m1, :m2 => m2)
    end

    def recv_multiplicarMatrices()
      result = receive_message(MultiplicarMatrices_result)
      return result.success unless result.success.nil?
      raise result.io unless result.io.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicarMatrices failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_sumarMatrices(seqid, iprot, oprot)
      args = read_args(iprot, SumarMatrices_args)
      result = SumarMatrices_result.new()
      begin
        result.success = @handler.sumarMatrices(args.m1, args.m2)
      rescue ::InvalidOperation => io
        result.io = io
      end
      write_result(result, oprot, 'sumarMatrices', seqid)
    end

    def process_restarMatrices(seqid, iprot, oprot)
      args = read_args(iprot, RestarMatrices_args)
      result = RestarMatrices_result.new()
      begin
        result.success = @handler.restarMatrices(args.m1, args.m2)
      rescue ::InvalidOperation => io
        result.io = io
      end
      write_result(result, oprot, 'restarMatrices', seqid)
    end

    def process_multiplicarMatrices(seqid, iprot, oprot)
      args = read_args(iprot, MultiplicarMatrices_args)
      result = MultiplicarMatrices_result.new()
      begin
        result.success = @handler.multiplicarMatrices(args.m1, args.m2)
      rescue ::InvalidOperation => io
        result.io = io
      end
      write_result(result, oprot, 'multiplicarMatrices', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumarMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    M2 = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      M2 => {:type => ::Thrift::Types::LIST, :name => 'm2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumarMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IO = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      IO => {:type => ::Thrift::Types::STRUCT, :name => 'io', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestarMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    M2 = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      M2 => {:type => ::Thrift::Types::LIST, :name => 'm2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestarMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IO = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      IO => {:type => ::Thrift::Types::STRUCT, :name => 'io', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiplicarMatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    M2 = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      M2 => {:type => ::Thrift::Types::LIST, :name => 'm2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiplicarMatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IO = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      IO => {:type => ::Thrift::Types::STRUCT, :name => 'io', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end


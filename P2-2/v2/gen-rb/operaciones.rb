#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'operaciones_types'

module Operaciones
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma(num1, num2)
      send_suma(num1, num2)
      return recv_suma()
    end

    def send_suma(num1, num2)
      send_message('suma', Suma_args, :num1 => num1, :num2 => num2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(num1, num2)
      send_resta(num1, num2)
      return recv_resta()
    end

    def send_resta(num1, num2)
      send_message('resta', Resta_args, :num1 => num1, :num2 => num2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def multiplicacion(num1, num2)
      send_multiplicacion(num1, num2)
      return recv_multiplicacion()
    end

    def send_multiplicacion(num1, num2)
      send_message('multiplicacion', Multiplicacion_args, :num1 => num1, :num2 => num2)
    end

    def recv_multiplicacion()
      result = receive_message(Multiplicacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicacion failed: unknown result')
    end

    def division(num1, num2)
      send_division(num1, num2)
      return recv_division()
    end

    def send_division(num1, num2)
      send_message('division', Division_args, :num1 => num1, :num2 => num2)
    end

    def recv_division()
      result = receive_message(Division_result)
      return result.success unless result.success.nil?
      raise result.io unless result.io.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division failed: unknown result')
    end

    def potencia(p)
      send_potencia(p)
      return recv_potencia()
    end

    def send_potencia(p)
      send_message('potencia', Potencia_args, :p => p)
    end

    def recv_potencia()
      result = receive_message(Potencia_result)
      return result.success unless result.success.nil?
      raise result.io unless result.io.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'potencia failed: unknown result')
    end

    def raizCuadrada(num)
      send_raizCuadrada(num)
      return recv_raizCuadrada()
    end

    def send_raizCuadrada(num)
      send_message('raizCuadrada', RaizCuadrada_args, :num => num)
    end

    def recv_raizCuadrada()
      result = receive_message(RaizCuadrada_result)
      return result.success unless result.success.nil?
      raise result.io unless result.io.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'raizCuadrada failed: unknown result')
    end

    def resolverCalculos(calculos)
      send_resolverCalculos(calculos)
      return recv_resolverCalculos()
    end

    def send_resolverCalculos(calculos)
      send_message('resolverCalculos', ResolverCalculos_args, :calculos => calculos)
    end

    def recv_resolverCalculos()
      result = receive_message(ResolverCalculos_result)
      return result.success unless result.success.nil?
      raise result.io unless result.io.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resolverCalculos failed: unknown result')
    end

    def transladar(p, x, y, z)
      send_transladar(p, x, y, z)
      return recv_transladar()
    end

    def send_transladar(p, x, y, z)
      send_message('transladar', Transladar_args, :p => p, :x => x, :y => y, :z => z)
    end

    def recv_transladar()
      result = receive_message(Transladar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'transladar failed: unknown result')
    end

    def escalar(p, x, y, z)
      send_escalar(p, x, y, z)
      return recv_escalar()
    end

    def send_escalar(p, x, y, z)
      send_message('escalar', Escalar_args, :p => p, :x => x, :y => y, :z => z)
    end

    def recv_escalar()
      result = receive_message(Escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'escalar failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.num1, args.num2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.num1, args.num2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_multiplicacion(seqid, iprot, oprot)
      args = read_args(iprot, Multiplicacion_args)
      result = Multiplicacion_result.new()
      result.success = @handler.multiplicacion(args.num1, args.num2)
      write_result(result, oprot, 'multiplicacion', seqid)
    end

    def process_division(seqid, iprot, oprot)
      args = read_args(iprot, Division_args)
      result = Division_result.new()
      begin
        result.success = @handler.division(args.num1, args.num2)
      rescue ::InvalidOperation => io
        result.io = io
      end
      write_result(result, oprot, 'division', seqid)
    end

    def process_potencia(seqid, iprot, oprot)
      args = read_args(iprot, Potencia_args)
      result = Potencia_result.new()
      begin
        result.success = @handler.potencia(args.p)
      rescue ::InvalidOperation => io
        result.io = io
      end
      write_result(result, oprot, 'potencia', seqid)
    end

    def process_raizCuadrada(seqid, iprot, oprot)
      args = read_args(iprot, RaizCuadrada_args)
      result = RaizCuadrada_result.new()
      begin
        result.success = @handler.raizCuadrada(args.num)
      rescue ::InvalidOperation => io
        result.io = io
      end
      write_result(result, oprot, 'raizCuadrada', seqid)
    end

    def process_resolverCalculos(seqid, iprot, oprot)
      args = read_args(iprot, ResolverCalculos_args)
      result = ResolverCalculos_result.new()
      begin
        result.success = @handler.resolverCalculos(args.calculos)
      rescue ::InvalidOperation => io
        result.io = io
      end
      write_result(result, oprot, 'resolverCalculos', seqid)
    end

    def process_transladar(seqid, iprot, oprot)
      args = read_args(iprot, Transladar_args)
      result = Transladar_result.new()
      result.success = @handler.transladar(args.p, args.x, args.y, args.z)
      write_result(result, oprot, 'transladar', seqid)
    end

    def process_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Escalar_args)
      result = Escalar_result.new()
      result.success = @handler.escalar(args.p, args.x, args.y, args.z)
      write_result(result, oprot, 'escalar', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IO = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      IO => {:type => ::Thrift::Types::STRUCT, :name => 'io', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Potencia_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    P = 1

    FIELDS = {
      P => {:type => ::Thrift::Types::STRUCT, :name => 'p', :class => ::Power}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Potencia_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IO = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
      IO => {:type => ::Thrift::Types::STRUCT, :name => 'io', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RaizCuadrada_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1

    FIELDS = {
      NUM => {:type => ::Thrift::Types::DOUBLE, :name => 'num'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RaizCuadrada_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IO = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'},
      IO => {:type => ::Thrift::Types::STRUCT, :name => 'io', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResolverCalculos_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CALCULOS = 1

    FIELDS = {
      CALCULOS => {:type => ::Thrift::Types::LIST, :name => 'calculos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Calculo}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResolverCalculos_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IO = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Calculo}},
      IO => {:type => ::Thrift::Types::STRUCT, :name => 'io', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Transladar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    P = 1
    X = 2
    Y = 3
    Z = 4

    FIELDS = {
      P => {:type => ::Thrift::Types::STRUCT, :name => 'p', :class => ::Point},
      X => {:type => ::Thrift::Types::DOUBLE, :name => 'x'},
      Y => {:type => ::Thrift::Types::DOUBLE, :name => 'y'},
      Z => {:type => ::Thrift::Types::DOUBLE, :name => 'z'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Transladar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Point}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    P = 1
    X = 2
    Y = 3
    Z = 4

    FIELDS = {
      P => {:type => ::Thrift::Types::STRUCT, :name => 'p', :class => ::Point},
      X => {:type => ::Thrift::Types::DOUBLE, :name => 'x'},
      Y => {:type => ::Thrift::Types::DOUBLE, :name => 'y'},
      Z => {:type => ::Thrift::Types::DOUBLE, :name => 'z'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Point}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

